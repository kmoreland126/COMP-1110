/**
* Short program to calculate parts of a loan.
*
* @author Kate Moreland - Fundamentals of Computing 1 - COMP1210-001
* @version 3-12-23
*/
public class BankLoan {
	// constant fields
   private static final int MAX_LOAN_AMOUNT = 100000;

   // instance variables (can be used within the class)
   private String customerName;
   private double balance, interestRate;
   private static int loansCreated = 0;
   
/**
* Constructor.
* @param customerNameIn Name of Customer
* @param interestRateIn Interest rate as a decimal
*/
   public BankLoan(String customerNameIn, double interestRateIn) { 
      customerName = customerNameIn;
      interestRate = interestRateIn;
      balance = 0;
      loansCreated++;
   }
   
/**
* Amount borrowed from the bank.
* @return boolean if the loan was made
* @param amount the amount of money to be added
*/
   public boolean borrowFromBank(double amount) {
      
      boolean wasLoanMade = false;
      
      if (balance + amount < MAX_LOAN_AMOUNT) {
         wasLoanMade = true;
         balance += amount;
      }
   
      return wasLoanMade;
   }

/**
* Lowers the loan mount by paying back the bank.
* @param amountPaid amount to give to the bank
* @return double the new balance of the loan
*/
   public double payBank(double amountPaid) {
      double newBalance = balance - amountPaid;
      if (newBalance < 0) {
         balance = 0;
         // paid too much, return the overcharge
         return Math.abs(newBalance);
      }
      else {
         balance = newBalance;
         return 0;
      }
   }
   
   /**
   * Returns the balance on the loan.
   * @return double current balance
   */
   public double getBalance() {
      return balance;
   }
   
   /**
   * Sets the interest rate for the loan.
   * @param interestRateIn the new interest rate as a decimal
   * @return boolean if the new rate was set
   */
   public boolean setInterestRate(double interestRateIn) {
   
      if (interestRateIn >= 0 && interestRateIn <= 1) {
         interestRate = interestRateIn;
         return true;
      }
      else {
         return false;
      }
   }
   
   /**
   * Returns the interest rate of the loan.
   * @return double interest rate
   */
   public double getInterestRate() {
      return interestRate;
   }
   
   /**
   * Adds the interest on the loan to the balance.
   */
   public void chargeInterest() {
      balance = balance * (1 + interestRate);
   }
         
   
  /**
  * Returns a printable representation of the information.
  * @return String state values as a string
  */
   public String toString() {
      String output = "Name: " + customerName + "\r\n" 
         + "Interest rate: " + interestRate + "%\r\n" 
         + "Balance: $" + balance + "\r\n";
      return output;
   }
       
   /**
   * Checks if the inputed number is valid.
   * @param amount number to be checked
   * @return boolean true if the number is valid
   */
   public static boolean isAmountValid(double amount) {
      if (amount >= 0) {
         return true;
      }
      return false;
   }
      
   /**
   * Checks if a loan in currently in debt.
   * @param loan the object being checked
   * @return boolean if the person who took out the loan is in debt
   */
   public static boolean isInDebt(BankLoan loan) {
      if (loan.getBalance() > 0) {
         return true;
      }
      return false;
   }
         
   /**
   * Returns the number of total loans taken.
   * @return int number of total loans taken
   */
   public static int getLoansCreated() {
      return loansCreated;
   }
   
   /**
   * Resets the number of loans created back to 0.
   */
   public static void resetLoansCreated() {
      loansCreated = 0;
   }
   

}
