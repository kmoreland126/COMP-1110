import java.util.Arrays;
import java.io.FileNotFoundException;
import java.io.File;
import java.util.Scanner;
/**
* Program to provide methods for reading the data file,
* and generate the reports.
*
* Project 10
* @author Kate Moreland - Fundamentals of Computing 1 - COMP1210-001
* @version 4-11-23
*/
public class BuyerProcessor {
   
   // Instance variables.
   private Buyer[] buyers;
   private String[] invalidRecords;
   
   /**
   * Buyer Processor constructor.
   */
   public BuyerProcessor() {
      buyers = new Buyer[0];
      invalidRecords = new String[0];
   }
   
   /**
   * Gets the Buyer Array.
   * @return array
   */
   public Buyer[] getBuyerArray() {
      return buyers;
   }
   
   /**
   * Gets the invalid records array.
   * @return array
   */
   public String[] getInvalidRecordsArray() {
      return invalidRecords;
   }
   
   /**
   * Increases the capacity of Buyer by 1.
   * @param newBuyer new
   */
   public void addBuyer(Buyer newBuyer) {
      buyers = Arrays.copyOf(buyers, buyers.length + 1);
      buyers[buyers.length - 1] = newBuyer;
   }
   
   /**
   * Adds invalid record.
   * @param newRecord added
   */
   public void addInvalidRecord(String newRecord) {
      invalidRecords = Arrays.copyOf(invalidRecords, invalidRecords.length + 1);
      invalidRecords[invalidRecords.length - 1] = newRecord;
   }
   
   /**
   * Reads the Buyer File.
   * @param fileName name of file read in
   * @throws FileNotFoundException for files not found
   */
   public void readBuyerFile(String fileName)
                 throws FileNotFoundException {                             
      Scanner fileScan = new Scanner(new File(fileName));
      
      while (fileScan.hasNextLine()) {
         String line = fileScan.nextLine();
         Scanner value = new Scanner(line);
         value.useDelimiter(" ");
         String category = value.next();
         String acctNumber = value.next();
         String lastname = value.next();
         String firstname = value.next();
         double[] purchases = new double[0];
         if (category.equals("1")) {
         
            category = "Preferred Buyer";
            PreferredBuyer pb = new PreferredBuyer(acctNumber, lastname + ", "
                + firstname);
            while (value.hasNext()) {
               pb.addPurchases(Double.parseDouble(value.next()));
            }
            addBuyer(pb);
         }
         else if (category.equals("2")) {
            category = "Elite Buyer";
            EliteBuyer eb = new EliteBuyer(acctNumber, lastname + ", " 
               + firstname);
            while (value.hasNext()) {
               eb.addPurchases(Double.parseDouble(value.next()));
            }
            addBuyer(eb);
         }
         else if (category.equals("3")) {
            category = "Premier Elite Buyer";
            PremierEliteBuyer peb = new PremierEliteBuyer(acctNumber,
               lastname + ", " + firstname);
            while (value.hasNext()) {
               peb.addPurchases(Double.parseDouble(value.next()));
            }
            addBuyer(peb);
         }
      }
   }

   /**
   * Method for generating a report.
   * @return report string
   */
   public String generateReport() {
      String output = "----------------------------\n"
         + "Buyer Report\n"
         + "----------------------------\n";
      for (int i = 0; i < buyers.length; i++) {
         output += buyers[i].toString() + "\n\n";
      }
      return output;
   }
   
   /**
   * Method to generate report by name.
   * @return report string
   */
   public String generateReportByName() {
      String output = "--------------------------------------\n"
         + "Buyer Report by Name\n"
         + "--------------------------------------\n";
      Arrays.sort(buyers);
      for (int i = 0; i < buyers.length; i++) {
         output += buyers[i].toString() + "\n\n";
      }
      return output;
   }
   
   /**
   * Method to generate report by total purchases.
   * @return report string
   */
   public String generateReportByTotalPurchases() {
      String output = "---------------------------------------\n"
         + "Buyer Report by Total Purchases\n"
         + "---------------------------------------\n";
      Arrays.sort(buyers, new TotalPurchasesCompare());
      for (int i = 0; i < buyers.length; i++) {
         output += buyers[i].toString() + "\n\n";
      }
      return output;
   }
}
